create or replace NONEDITIONABLE PROCEDURE           "ADD_ADRES" 
(v_idadresu IN ADRESY.ID_ADRESU%TYPE,
v_miejscowosc IN ADRESY.MIEJSCOWOSC%TYPE,
v_ulica IN ADRESY.ULICA%TYPE,
v_nrdomu IN ADRESY.NUMER_DOMU%TYPE,
v_nrlokalu IN ADRESY.NUMER_LOKALU%TYPE,
v_kodpocztowy IN ADRESY.KOD_POCZTOWY%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO ADRESY (ID_ADRESU, MIEJSCOWOSC, ULICA, NUMER_DOMU, NUMER_LOKALU, KOD_POCZTOWY)
    VALUES (v_idadresu, v_miejscowosc, v_ulica, v_nrdomu, v_nrlokalu, v_kodpocztowy);
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;


create or replace NONEDITIONABLE PROCEDURE           "ADD_AUTOR" 
(v_idautora IN AUTORZY.ID_AUTORA%TYPE,
v_imie IN AUTORZY.IMIE%TYPE,
v_nazwisko IN AUTORZY.NAZWISKO%TYPE,
v_narodowosc IN AUTORZY.NARODOWOSC%TYPE,
v_data_urodzenia IN AUTORZY.DATA_URODZENIA%TYPE,
v_data_smierci IN AUTORZY.DATA_SMIERCI%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO AUTORZY (ID_AUTORA, IMIE, NAZWISKO, NARODOWOSC, DATA_URODZENIA, DATA_SMIERCI)
    VALUES (v_idautora, v_imie, v_nazwisko, v_narodowosc, v_data_urodzenia, v_data_smierci);
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;

create or replace NONEDITIONABLE PROCEDURE           "ADD_KATEGORIA" 
(v_idkategorii IN KATEGORIE.ID_KATEGORII%TYPE,
v_nazwa IN KATEGORIE.NAZWA%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO KATEGORIE (ID_KATEGORII, NAZWA)
    VALUES (v_idkategorii, v_nazwa);
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;


create or replace NONEDITIONABLE PROCEDURE           "ADD_KONTO" 
(v_idkonta IN LOGOWANIE.ID_KONTA%TYPE,
v_idroli IN LOGOWANIE.ID_ROLI%TYPE,
v_login IN LOGOWANIE.LOGIN%TYPE,
v_haslo IN LOGOWANIE.HASLO%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO LOGOWANIE (ID_KONTA, ID_ROLI, LOGIN, HASLO)
    VALUES (v_idkonta,v_idroli,v_login,v_haslo);
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;


create or replace NONEDITIONABLE PROCEDURE           "ADD_KSIAZKA" 
(v_idksiazki IN KSIAZKI.ID_KSIAZKI%TYPE,
v_idkategorii IN KSIAZKI.ID_KATEGORII%TYPE,
v_idwydawnictwa IN KSIAZKI.ID_WYDAWNICTWA%TYPE,
v_tytul IN KSIAZKI.TYTUL%TYPE,
v_data_wydania IN KSIAZKI.DATA_WYDANIA%TYPE,
v_ilosc_egzemplarzy IN KSIAZKI.ILOSC_EGZEMPLARZY%TYPE,
v_idautora IN AUTORZY.ID_AUTORA%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO KSIAZKI (ID_KSIAZKI, ID_KATEGORII, ID_WYDAWNICTWA, TYTUL, DATA_WYDANIA, ILOSC_EGZEMPLARZY)
    VALUES (v_idksiazki, v_idkategorii, v_idwydawnictwa, v_tytul, v_data_wydania, v_ilosc_egzemplarzy);
    commit;
    INSERT INTO AUTORZY_KSIAZKI (ID_KSIAZKI, ID_AUTORA)
    VALUES (v_idksiazki, v_idautora);
    commit;
    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;

create or replace NONEDITIONABLE PROCEDURE           "ADD_USER" 
(v_idklienta IN KLIENCI.ID_KLIENTA%TYPE,
v_idadresu IN KLIENCI.ID_ADRESU%TYPE,
v_idkonta IN KLIENCI.ID_KONTA%TYPE,
v_imie IN KLIENCI.IMIE%TYPE,
v_nazwisko IN KLIENCI.NAZWISKO%TYPE,
v_telefon IN KLIENCI.NUMER_TELEFONU%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO KLIENCI (ID_KLIENTA,ID_ADRESU, ID_KONTA, IMIE, NAZWISKO, NUMER_TELEFONU)
    VALUES (v_idklienta,v_idadresu,v_idkonta,v_imie, v_nazwisko, v_telefon);
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;



create or replace NONEDITIONABLE PROCEDURE           "ADD_WYDAWNICTWO" 
(v_idwydawnictwa IN WYDAWNICTWA.ID_WYDAWNICTWA%TYPE,
v_nazwa IN WYDAWNICTWA.NAZWA%TYPE,
v_miejscowosc IN WYDAWNICTWA.MIEJSCOWOSC%TYPE,
v_ulica IN WYDAWNICTWA.ULICA%TYPE,
v_numer_budynku IN WYDAWNICTWA.NUMER_BUDYNKU%TYPE,
out_result OUT VARCHAR2)
AS
BEGIN
    INSERT INTO WYDAWNICTWA (ID_WYDAWNICTWA, NAZWA, MIEJSCOWOSC, ULICA, NUMER_BUDYNKU)
    VALUES (v_idwydawnictwa, v_nazwa, v_miejscowosc, v_ulica, v_numer_budynku);
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END;


create or replace NONEDITIONABLE PROCEDURE           "ADD_WYPOZYCZENIE" 
(v_idwypozyczenia IN WYPOZYCZENIA.ID_WYPOZYCZENIA%TYPE,
v_idksiazki IN WYPOZYCZENIA.ID_KSIAZKI%TYPE,
v_idpracownika IN WYPOZYCZENIA.ID_PRACOWNIKA%TYPE,
v_idklienta IN WYPOZYCZENIA.ID_KLIENTA%TYPE,
v_data_wypozyczenia IN WYPOZYCZENIA.DATA_WYPOZYCZENIA%TYPE,
v_data_zwrotu IN WYPOZYCZENIA.DATA_ZWROTU%TYPE,
v_idkary IN KARY_WYPOZYCZENIA.ID_KARY%TYPE,
v_naleznosc IN KARY_WYPOZYCZENIA.NALEZNOSC%TYPE,
out_result OUT VARCHAR2)
AS 
BEGIN
  INSERT INTO WYPOZYCZENIA (ID_WYPOZYCZENIA, ID_KSIAZKI, ID_PRACOWNIKA, ID_KLIENTA, DATA_WYPOZYCZENIA, DATA_ZWROTU)
  VALUES (v_idwypozyczenia, v_idksiazki, v_idpracownika, v_idklienta, v_data_wypozyczenia, v_data_zwrotu);
    commit;
    INSERT INTO KARY_WYPOZYCZENIA (ID_KARY, ID_WYPOZYCZENIA, NALEZNOSC)
    VALUES (v_idkary, v_idwypozyczenia, v_naleznosc);
    commit;
    UPDATE KSIAZKI 
    SET ILOSC_EGZEMPLARZY = ILOSC_EGZEMPLARZY -1
    WHERE ID_KSIAZKI = v_idksiazki;
    commit;

    out_result := 'TRUE';

    EXCEPTION
  WHEN OTHERS THEN 
  out_result := 'FALSE';
  ROLLBACK;
END ADD_WYPOZYCZENIE;



create or replace NONEDITIONABLE PROCEDURE deleteWYP(j_idwyp IN INT)
IS
BEGIN
  DELETE KARY_WYPOZYCZENIA where ID_WYPOZYCZENIA = j_idwyp;
  COMMIT;
   DELETE WYPOZYCZENIA where ID_WYPOZYCZENIA = j_idwyp;
  COMMIT;
END;


create or replace NONEDITIONABLE PROCEDURE           "GET_ID_AUTORA" 
(v_imie IN AUTORZY.IMIE%TYPE, v_nazwisko IN AUTORZY.NAZWISKO%TYPE, CURSOR8 OUT SYS_REFCURSOR)
as
BEGIN
OPEN CURSOR8 FOR
  select ID_AUTORA
  FROM AUTORZY
  WHERE IMIE = v_imie AND NAZWISKO = v_nazwisko;
END GET_ID_AUTORA;


create or replace NONEDITIONABLE PROCEDURE           "GET_ID_KATEGORII" 
(v_nazwa IN KATEGORIE.NAZWA%TYPE, CURSOR7 OUT SYS_REFCURSOR)
as
BEGIN
OPEN CURSOR7 FOR
  select ID_KATEGORII
  FROM KATEGORIE
  WHERE NAZWA = v_nazwa;
END GET_ID_KATEGORII;


create or replace NONEDITIONABLE PROCEDURE "GET_ID_KLIENTA_LOGIN"
(j_idkonta IN KLIENCI.ID_KONTA%TYPE,data OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN data FOR
    SELECT ID_KLIENTA
    FROM KLIENCI
    WHERE ID_KONTA = j_idkonta;
END;


create or replace NONEDITIONABLE PROCEDURE           "GET_ID_KSIAZKI_UPDATE" 
(v_tytul IN KSIAZKI.TYTUL%TYPE, CURSOR10 OUT SYS_REFCURSOR)
as
BEGIN
OPEN CURSOR10 FOR
  select ID_KSIAZKI
  FROM KSIAZKI
  WHERE TYTUL = v_tytul;
END GET_ID_KSIAZKI_UPDATE;


create or replace NONEDITIONABLE PROCEDURE           "GET_ID_WYDAWNICTWA" 
(v_nazwa IN WYDAWNICTWA.NAZWA%TYPE, CURSOR9 OUT SYS_REFCURSOR)
as
BEGIN
OPEN CURSOR9 FOR
  select ID_WYDAWNICTWA
  FROM WYDAWNICTWA
  WHERE NAZWA = v_nazwa;
END;

create or replace NONEDITIONABLE PROCEDURE "LOGIN" 
(j_login IN LOGOWANIE.LOGIN%TYPE,j_haslo IN LOGOWANIE.HASLO%TYPE,data OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN data FOR
        Select ID_KONTA ,
ID_ROLI ,
LOGIN ,
HASLO 
        from LOGOWANIE
        Where LOGIN=j_login AND HASLO=j_haslo;
END;

create or replace NONEDITIONABLE PROCEDURE           "SHOW_ADMIN" (ID_K IN NUMERIC,CURSOR1 OUT SYS_REFCURSOR) AS 
BEGIN
OPEN CURSOR1 FOR
SELECT
    IMIE,NAZWISKO,PESEL,DATA_URODZENIA,AKTYWNE_BADANIA
FROM PRACOWNICY
WHERE ID_KONTA=ID_K;
END SHOW_ADMIN;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_AUTORZY" (
CURSOR_4 OUT SYS_REFCURSOR)
AS
BEGIN 
OPEN CURSOR_4 FOR
SELECT IMIE, NAZWISKO, NARODOWOSC, DATA_URODZENIA, DATA_SMIERCI
FROM AUTORZY;
END;

create or replace NONEDITIONABLE PROCEDURE           "SHOW_BOOKS" (
CURSOR_1 OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_1 FOR
SELECT K.TYTUL, KA.NAZWA, A.IMIE, A.NAZWISKO, K.ILOSC_EGZEMPLARZY 
FROM KSIAZKI K
JOIN AUTORZY_KSIAZKI AK on K.ID_KSIAZKI = AK.ID_KSIAZKI 
JOIN AUTORZY A on AK.ID_AUTORA = A.ID_AUTORA
JOIN KATEGORIE KA on K.ID_KATEGORII = KA.ID_KATEGORII;
END;

create or replace NONEDITIONABLE PROCEDURE           "SHOW_BOOKS_ADMIN" (
CURSOR_11 OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_11 FOR
SELECT K.ID_KSIAZKI, K.TYTUL, KA.NAZWA, A.IMIE, A.NAZWISKO, K.ILOSC_EGZEMPLARZY 
FROM KSIAZKI K
JOIN AUTORZY_KSIAZKI AK on K.ID_KSIAZKI = AK.ID_KSIAZKI 
JOIN AUTORZY A on AK.ID_AUTORA = A.ID_AUTORA
JOIN KATEGORIE KA on K.ID_KATEGORII = KA.ID_KATEGORII;
END;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_KARY" (
CURSOR_2 OUT SYS_REFCURSOR)
AS
BEGIN 
OPEN CURSOR_2 FOR
SELECT TYP_KARY, KWOTA_WYNAGRADZAJACA
FROM KARY;
END;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_KATEGORIE" (
CURSOR_6 OUT SYS_REFCURSOR)
AS
BEGIN 
OPEN CURSOR_6 FOR
SELECT ID_KATEGORII, NAZWA
FROM KATEGORIE;
END;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_KLIENCI" (ID_K IN NUMERIC,CURSOR1 OUT SYS_REFCURSOR) AS 
BEGIN
OPEN CURSOR1 FOR
SELECT IMIE,NAZWISKO,NUMER_TELEFONU,ADRESY.ID_ADRESU,MIEJSCOWOSC,ULICA,NUMER_DOMU,NUMER_LOKALU,KOD_POCZTOWY
FROM KLIENCI
JOIN ADRESY ON klienci.id_adresu = adresy.id_adresu
WHERE klienci.id_konta = ID_K;
END SHOW_KLIENCI;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_KLIENCI_ADMIN" (
CURSOR_12 OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_12 FOR
SELECT ID_KLIENTA, IMIE, NAZWISKO, NUMER_TELEFONU
FROM KLIENCI;
END;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_WYDAWNICTWA" (
CURSOR_3 OUT SYS_REFCURSOR)
AS
BEGIN 
OPEN CURSOR_3 FOR
SELECT NAZWA, MIEJSCOWOSC, ULICA, NUMER_BUDYNKU
FROM WYDAWNICTWA;
END;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_WYP_ADM" (
CURSOR_5 OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_5 FOR
SELECT W.ID_WYPOZYCZENIA, KL.IMIE, KL.NAZWISKO, KL.NUMER_TELEFONU, K.TYTUL, A.IMIE, A.NAZWISKO, W.DATA_WYPOZYCZENIA, W.DATA_ZWROTU, KW.NALEZNOSC
FROM KSIAZKI K 
JOIN AUTORZY_KSIAZKI AK on K.ID_KSIAZKI = AK.ID_KSIAZKI 
JOIN AUTORZY A on AK.ID_AUTORA = A.ID_AUTORA
JOIN WYPOZYCZENIA W on K.ID_KSIAZKI = W.ID_KSIAZKI
JOIN KLIENCI KL on KL.ID_KLIENTA = W.id_klienta
JOIN KARY_WYPOZYCZENIA KW on KW.ID_WYPOZYCZENIA = W.ID_WYPOZYCZENIA;
END;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_WYPOZYCZENIA" (ID_K IN NUMERIC,CURSOR1 OUT SYS_REFCURSOR) AS 
BEGIN
OPEN CURSOR1 FOR
  SELECT TYTUL,NAZWA,IMIE,NAZWISKO,DATA_WYPOZYCZENIA,DATA_ZWROTU,NALEZNOSC FROM WYPOZYCZENIA
  JOIN kary_wypozyczenia on wypozyczenia.id_wypozyczenia = kary_wypozyczenia.id_wypozyczenia
  JOIN ksiazki on ksiazki.id_ksiazki = wypozyczenia.id_ksiazki
  JOIN kategorie on kategorie.id_kategorii = ksiazki.id_kategorii
  JOIN autorzy_ksiazki on autorzy_ksiazki.id_ksiazki = ksiazki.id_ksiazki
  JOIN autorzy on autorzy.id_autora = autorzy_ksiazki.id_autora
  WHERE ID_KLIENTA = ID_K;
END SHOW_WYPOZYCZENIA;


create or replace NONEDITIONABLE PROCEDURE           "SHOW_WYPOZYCZENIA2" (ID_K IN NUMERIC,CURSOR12 OUT SYS_REFCURSOR) AS 
BEGIN
OPEN CURSOR12 FOR
  SELECT wypozyczenia.id_wypozyczenia,TYTUL,NAZWA,IMIE,NAZWISKO,DATA_WYPOZYCZENIA,DATA_ZWROTU,NALEZNOSC FROM WYPOZYCZENIA
  JOIN kary_wypozyczenia on wypozyczenia.id_wypozyczenia = kary_wypozyczenia.id_wypozyczenia
  JOIN ksiazki on ksiazki.id_ksiazki = wypozyczenia.id_ksiazki
  JOIN kategorie on kategorie.id_kategorii = ksiazki.id_kategorii
  JOIN autorzy_ksiazki on autorzy_ksiazki.id_ksiazki = ksiazki.id_ksiazki
  JOIN autorzy on autorzy.id_autora = autorzy_ksiazki.id_autora
  WHERE ID_KLIENTA = ID_K;
END;


create or replace NONEDITIONABLE PROCEDURE "UPDATE_KLIENCI_ADRES" (ID_A IN INTEGER, J_MIEJSCOWOSC IN VARCHAR2, J_ULICA IN VARCHAR2, J_NUMER_DOMU IN VARCHAR2, J_NUMER_LOKALU IN VARCHAR2, J_KOD_POCZTOWY IN VARCHAR2) AS
BEGIN
UPDATE ADRESY
SET MIEJSCOWOSC = J_MIEJSCOWOSC, ULICA = J_ULICA, NUMER_DOMU = J_NUMER_DOMU, NUMER_LOKALU = J_NUMER_LOKALU, KOD_POCZTOWY = J_KOD_POCZTOWY
WHERE ID_ADRESU = ID_A;
END UPDATE_KLIENCI_ADRES;



create or replace NONEDITIONABLE PROCEDURE "UPDATE_KLIENCI_DANE" (ID_K IN INTEGER, J_IMIE IN VARCHAR2, J_NAZWISKO IN VARCHAR2, J_NUMER_TELEFONU IN VARCHAR2) AS
BEGIN
UPDATE KLIENCI
    SET IMIE = J_IMIE, NAZWISKO = J_NAZWISKO, NUMER_TELEFONU = J_NUMER_TELEFONU
    WHERE ID_KONTA = ID_K;
END UPDATE_KLIENCI_DANE;



create or replace NONEDITIONABLE PROCEDURE "UPDATE_KSIAZKI_ADM" (ID_K IN INTEGER, J_ILOSC_EGZEMPLARZY IN INTEGER) AS
BEGIN
UPDATE KSIAZKI
    SET ILOSC_EGZEMPLARZY = J_ILOSC_EGZEMPLARZY
    WHERE ID_KSIAZKI = ID_K;
END UPDATE_KSIAZKI_ADM;


create or replace NONEDITIONABLE PROCEDURE "UPDATE_WYP_ADM" (ID_W IN INTEGER, J_DATAZWROTU IN DATE, J_NALEZNOSC IN INTEGER) AS
BEGIN
UPDATE WYPOZYCZENIA
    SET DATA_ZWROTU = J_DATAZWROTU
    WHERE ID_WYPOZYCZENIA = ID_W;
UPDATE KARY_WYPOZYCZENIA
    SET NALEZNOSC = J_NALEZNOSC
    WHERE ID_WYPOZYCZENIA = ID_W;
END UPDATE_WYP_ADM;

